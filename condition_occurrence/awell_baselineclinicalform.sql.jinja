{# Copyright 2022 RADar-AZDelta #}
{# SPDX-License-Identifier: gpl3+ #}
-- currently limited to form_id = lung_cancer_baseline_clinical_azdelta

with awell_vragenlijsten as (
    select distinct 
        fq.form_id
        ,fq.question_id
        ,fq.label
        ,fq.label_en
        ,fq.sub_question_id
        ,fq.sub_label
        ,fq.sub_label_en
        ,fr.response_label_en as structured_answer_en
        ,fr.response_label_nl as structured_answer_nl
        ,IF(fr.response_label_nl is not null, r.response_value, null) as structured_answer_code
        ,IF(fr.response_label_nl is null, r.response_value, null) as free_answer
        ,u.patient_code
        ,u.doctor_id
        ,r.submission_date
        ,r.step_id
        ,r.episode_name
    from {{project_id}}.awell.form_questions fq
    inner join {{project_id}}.awell.responses r on fq.form_id = r.form_id 
        and fq.question_id = r.question_id 
        and ((fq.sub_question_id is null and r.sub_question_id is null) or (fq.sub_question_id = r.sub_question_id))
    left outer join {{project_id}}.awell.form_responses fr on fr.form_id = fq.form_id 
        and fr.question_id = fq.question_id
        and fr.response_value = r.response_value
    inner join {{project_id}}.awell.users u on u.user_id = r.user_id
    where fq.form_id = "lung_cancer_baseline_clinical_azdelta"
    order by fq.form_id, fq.question_id, fq.sub_question_id, structured_answer_nl, free_answer
), cte as (
    select distinct
        concat('AWELL_', form_id, '_', coalesce(sub_question_id, question_id), submission_date, '_', patient_code) as condition_occurrence_id
        ,patient_code as person_id
        ,case when question_id = 'mutation_status' then  concat('AWELL_', question_id, '_',sub_question_id) 
        else concat('AWELL_',question_id)
        end  as condition_concept_id
        ,case when label = 'Date of pathological or clinical diagnosis' then cast(substring(regexp_replace(free_answer, r'[^0-9-T:]',''), 2, 10) as date) else cast(submission_date as date) end as condition_start_date
        ,case when label = 'Date of pathological or clinical diagnosis' then cast(substring(regexp_replace(free_answer, r'[^0-9-T:]',''), 2, 19) as datetime) 
        else cast(submission_date as datetime) end as condition_start_datetime
        ,cast(null as date) as condition_end_date
        ,cast(null as datetime) as condition_end_datetime
        ,'ADMINISTRATION_RECORD' as condition_type_concept_id
        ,'MZG_TYPE_N' as condition_status_concept_id 
        ,cast(null as string) as stop_reason
        --,cast(null as string) as provider_id
        --,cast(null as string) as visit_occurrence_id
        --,cast(null as string) as visit_detail_id
        ,case when question_id = 'mutation_status' then  concat('AWELL_', question_id, '_',sub_question_id) 
        else concat('AWELL_',question_id) end as condition_source_value
        ,cast(null as string) as condition_source_concept_id
        ,cast(null as string) as condition_status_source_value 
    from awell_vragenlijsten
    inner join {{project_id}}.{{dataset_id_omop}}.source_to_concept_map scm 
    on concat('AWELL_', question_id, '_',sub_question_id) = scm.source_code
    inner join {{project_id}}.{{dataset_id_omop}}.concept c 
    on c.concept_id = scm.target_concept_id
    inner join {{project_id}}.{{dataset_id_omop}}.source_to_concept_map scm2
    on concat(
        case when question_id = 'mutation_status' 
            then concat('AWELL_', question_id, '_', sub_question_id) 
            else concat('AWELL_', question_id)
            end
        , '_'
        , coalesce(replace(structured_answer_nl, ' ', '_'), replace(free_answer, ' ', '_'))) = scm2.source_code
    where c.domain_id = 'Condition' and structured_answer_en = 'Yes'
)
SELECT cte.*
    , COALESCE(ARRAY_AGG(vd.provider_id ORDER BY vd.visit_detail_start_datetime DESC LIMIT 1)[OFFSET(0)], ARRAY_AGG(v.provider_id ORDER BY v.visit_start_datetime DESC LIMIT 1)[OFFSET(0)]) as provider_id
    , ARRAY_AGG(v.visit_occurrence_id ORDER BY v.visit_start_datetime DESC LIMIT 1)[OFFSET(0)] as visit_occurrence_id
    , ARRAY_AGG(vd.visit_detail_id ORDER BY vd.visit_detail_start_datetime DESC LIMIT 1)[OFFSET(0)] as visit_detail_id
FROM cte
LEFT OUTER JOIN {{project_id}}.{{dataset_id_work}}.visit_occurrence_upload v ON v.person_id = cte.person_id AND cte.condition_start_datetime >= v.visit_start_datetime and cte.condition_start_datetime <= v.visit_end_datetime 
LEFT OUTER JOIN {{project_id}}.{{dataset_id_work}}.visit_detail_upload vd ON v.visit_occurrence_id = vd.visit_occurrence_id AND cte.condition_start_datetime >= vd.visit_detail_start_datetime and cte.condition_start_datetime <= vd.visit_detail_start_datetime
inner join {{project_id}}.{{dataset_id_work}}.person_upload p
on cte.person_id = p.person_id
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13